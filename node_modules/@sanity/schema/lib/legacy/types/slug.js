'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SlugType = exports.CURRENT_FIELD = undefined;

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

const OVERRIDABLE_FIELDS = ['jsonType', 'type', 'name', 'title', 'description', 'options'];

const CURRENT_FIELD = exports.CURRENT_FIELD = {
  name: 'current',
  title: 'Current slug',
  type: 'string'
};

const SLUG_FIELDS = [CURRENT_FIELD];

const SLUG_CORE = {
  name: 'slug',
  title: 'Slug',
  type: null,
  jsonType: 'object'
};

const SlugType = {
  get() {
    return SLUG_CORE;
  },
  extend(subTypeDef, extendMember) {
    const parsed = Object.assign((0, _pick3.default)(SLUG_CORE, OVERRIDABLE_FIELDS), subTypeDef, {
      type: SLUG_CORE,
      preview: {
        select: { title: 'current' }
      }
    });

    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return SLUG_FIELDS.map(fieldDef => {
        const name = fieldDef.name,
              type = _objectWithoutProperties(fieldDef, ['name']);

        return {
          name: name,
          type: extendMember(type)
        };
      });
    });

    return subtype(parsed);

    function subtype(parent) {
      return {
        get() {
          return parent;
        },
        extend: extensionDef => {
          const current = Object.assign({}, parent, (0, _pick3.default)(extensionDef, OVERRIDABLE_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }
};
exports.SlugType = SlugType;