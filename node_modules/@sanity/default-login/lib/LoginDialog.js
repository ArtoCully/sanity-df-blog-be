'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _authenticationFetcher = require('part:@sanity/base/authentication-fetcher');

var _authenticationFetcher2 = _interopRequireDefault(_authenticationFetcher);

var _defaultLogin = require('config:@sanity/default-login');

var _defaultLogin2 = _interopRequireDefault(_defaultLogin);

var _fullscreen = require('part:@sanity/components/dialogs/fullscreen');

var _fullscreen2 = _interopRequireDefault(_fullscreen);

var _loginDialogContent = require('part:@sanity/base/login-dialog-content');

var _loginDialogContent2 = _interopRequireDefault(_loginDialogContent);

var _generateHelpUrl = require('@sanity/generate-help-url');

var _generateHelpUrl2 = _interopRequireDefault(_generateHelpUrl);

var _LoginDialog = require('./styles/LoginDialog.css');

var _LoginDialog2 = _interopRequireDefault(_LoginDialog);

var _cancelWrap = require('./cancelWrap');

var _cancelWrap2 = _interopRequireDefault(_cancelWrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LoginDialog extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      providers: [],
      error: null
    }, this.handleLoginButtonClicked = (provider, evnt) => {
      evnt.preventDefault();
      this.redirectToProvider(provider);
    }, this.handleErrorDialogClosed = () => {
      this.setState({ error: null });
    }, _temp;
  }

  componentDidMount() {
    this.getProviders = (0, _cancelWrap2.default)(_authenticationFetcher2.default.getProviders());
    this.getProviders.promise.then(providers => this.setState({ providers: providers })).catch(err => this.setState({ error: err }));
  }

  componentWillUnmount() {
    this.getProviders.cancel();
  }

  componentWillUpdate(_, nextState) {
    const providers = nextState.providers;

    if (providers.length === 1 && _defaultLogin2.default.providers && _defaultLogin2.default.providers.redirectOnSingle) {
      this.redirectToProvider(providers[0]);
    }
  }

  redirectToProvider(provider) {
    const projectId = this.props.projectId;

    const currentUrl = encodeURIComponent(window.location.toString());
    const params = [`origin=${currentUrl}`, projectId && `projectId=${projectId}`].filter(Boolean);
    if (provider.custom && !provider.supported) {
      this.setState({
        error: {
          message: 'This project is missing the required "thirdPartyLogin" ' + 'feature to support custom logins.',
          link: (0, _generateHelpUrl2.default)('third-party-login')
        }
      });
      return;
    }
    window.location = `${provider.url}?${params.join('&')}`;
  }

  render() {
    var _state = this.state;
    const error = _state.error,
          providers = _state.providers;
    var _props = this.props;
    const title = _props.title,
          description = _props.description,
          SanityLogo = _props.SanityLogo;


    if (error) {
      return _react2.default.createElement(
        _fullscreen2.default,
        {
          color: 'danger',
          title: 'Error',
          isOpen: true,
          centered: true,
          onClose: this.handleErrorDialogClosed
        },
        _react2.default.createElement(
          'div',
          { className: _LoginDialog2.default.error },
          error.message,
          error.link && _react2.default.createElement(
            'p',
            null,
            _react2.default.createElement(
              'a',
              { href: error.link },
              'Read more'
            )
          )
        )
      );
    }

    if (providers.length < 1) {
      return _react2.default.createElement(
        'div',
        null,
        'No providers configured'
      );
    }

    return _react2.default.createElement(_loginDialogContent2.default, {
      title: title,
      description: description,
      providers: providers,
      SanityLogo: SanityLogo,
      onLoginButtonClick: this.handleLoginButtonClicked
    });
  }
}
exports.default = LoginDialog; /* eslint-disable react/no-multi-comp */

LoginDialog.propTypes = {
  title: _propTypes2.default.node.isRequired,
  description: _propTypes2.default.node,
  projectId: _propTypes2.default.string,
  SanityLogo: _propTypes2.default.func
};
LoginDialog.defaultProps = {
  description: null,
  projectId: null,
  SanityLogo: null
};