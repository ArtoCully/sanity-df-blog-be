'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.invokePrepare = undefined;

var _uniqBy2 = require('lodash/uniqBy');

var _uniqBy3 = _interopRequireDefault(_uniqBy2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _isPlainObject2 = require('lodash/isPlainObject');

var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _debounce2 = require('lodash/debounce');

var _debounce3 = _interopRequireDefault(_debounce2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = prepareForPreview;

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const identity = v => v;
const PRESERVE_KEYS = ['_id', '_type', '_upload'];
const EMPTY = [];

/*:: type __DEV__ = boolean*/
/*:: type ViewOptions = {}*/
/*:: type SelectedValue = {}*/
/*:: type PreparedValue = {
  title: string,
  subtitle: string,
  description: string
}*/
/*:: type PreviewConfig = {
  select: {[string]: string},
  prepare?: (SelectedValue, ViewOptions) => PreparedValue
}*/
/*:: type Type = {
  name: string,
  preview: PreviewConfig
}*/
/*:: type PrepareInvocationResult = {|
  selectedValue: SelectedValue,
  returnValue: PreparedValue,
  errors: Error[]
|}*/


const errorCollector = (() => {
  let errorsByType = {};

  return {
    add: (type /*: Type*/, value /*: SelectedValue*/, error /*: Error*/) => {
      if (!errorsByType[type.name]) {
        errorsByType[type.name] = [];
      }
      errorsByType[type.name].push({ error: error, type: type, value });
    },
    getAll() {
      return errorsByType;
    },
    clear() {
      errorsByType = {};
    }
  };
})();

const reportErrors = (0, _debounce3.default)(() => {
  /* eslint-disable no-console */
  const errorsByType = errorCollector.getAll();
  const uniqueErrors = (0, _flatten3.default)(Object.keys(errorsByType).map(typeName => {
    const entries = errorsByType[typeName];
    return (0, _uniqBy3.default)(entries, entry => entry.error.message);
  }));
  const errorCount = uniqueErrors.length;
  if (errorCount === 0) {
    return;
  }

  console.groupCollapsed(`%cHeads up! Got ${errorCount === 1 ? 'error' : `${errorCount} errors`} while preparing data for preview. Click for details.` + ' This may be a hard failure in production and cause your Studio to crash.', 'color: #ff7e7c');

  Object.keys(errorsByType).forEach(typeName => {
    const entries = errorsByType[typeName];
    const first = entries[0];
    console.group(`Check the preview config for schema type "${typeName}": %o`, first.type.preview);
    const uniqued = (0, _uniqBy3.default)(entries, entry => entry.error.message);
    uniqued.forEach(entry => {
      if (entry.error.type === 'returnValueError') {
        const hasPrepare = typeof entry.type.preview.prepare === 'function';
        const value = entry.value,
              error = entry.error;

        console.log(`Encountered an invalid ${hasPrepare ? 'return value when calling prepare(%o)' : 'value targeted by preview.select'}:`, value);
        console.error(error);
      }
      if (entry.error.type === 'prepareError') {
        const value = entry.value,
              error = entry.error;

        console.log('Encountered an error when calling prepare(%o):', value);
        console.error(error);
      }
    });
    console.groupEnd();
  });
  console.groupEnd();
  errorCollector.clear();
  /* eslint-enable no-console */
}, 1000);

const isRenderable = fieldName => value => {
  const type = typeof value;
  if (value === null || type === 'undefined' || type === 'string' || type === 'number' || type === 'boolean') {
    return EMPTY;
  }
  return [assignType('returnValueError', new Error(`The "${fieldName}" field should be a string, number, boolean, undefined or null, instead saw ${inspect(value)}`))];
};
const FIELD_NAME_VALIDATORS = {
  media: () => {
    // not sure how to validate media as it would  possibly involve executing a function and check the
    // return value
    return EMPTY;
  },
  title: isRenderable('title'),
  subtitle: isRenderable('subtitle'),
  description: isRenderable('description'),
  imageUrl: isRenderable('imageUrl'),
  date: isRenderable('date')
};

function inspect(val, prefixType = true) {
  if ((0, _isPlainObject3.default)(val)) {
    const keys = Object.keys(val);
    const ellipse = keys.length > 3 ? '...' : '';
    const prefix = `object with keys `;
    return `${prefixType ? prefix : ''}{${keys.slice(0, 3).join(', ')}${ellipse}}`;
  }
  if (Array.isArray(val)) {
    const ellipse = val.length > 3 ? '...' : '';
    const prefix = `array with `;
    return `${prefixType ? prefix : ''}[${val.map(v => inspect(v, false))}${ellipse}]`;
  }
  return `the ${typeof val} ${val}`;
}

function validateFieldValue(fieldName, fieldValue) {
  if (typeof fieldValue === 'undefined') {
    return EMPTY;
  }
  const validator = FIELD_NAME_VALIDATORS[fieldName];
  return validator && validator(fieldValue) || EMPTY;
}

function assignType(type, error) {
  return Object.assign(error, { type });
}

function validatePreparedValue(preparedValue /*: PreparedValue*/) {
  if (!(0, _isPlainObject3.default)(preparedValue)) {
    return [assignType('returnValueError', new Error(`Invalid return value. Expected a plain object with at least a 'title' field, instead saw ${inspect(preparedValue)}`))];
  }
  return Object.keys(preparedValue).reduce((acc, fieldName) => {
    return [...acc, ...validateFieldValue(fieldName, preparedValue[fieldName])];
  }, EMPTY);
}

function validateReturnedPreview(result /*: PrepareInvocationResult*/) {
  return _extends({}, result, {
    errors: [...result.errors, ...validatePreparedValue(result.returnValue)]
  });
}

function invokePrepareChecked(type /*: Type*/, value /*: SelectedValue*/, viewOptions /*: ViewOptions*/) /*: PrepareInvocationResult*/ {
  const prepare = type.preview.prepare;
  try {
    return {
      returnValue: prepare ? prepare(value, viewOptions) : value,
      errors: EMPTY
    };
  } catch (error) {
    return {
      returnValue: null,
      errors: [assignType(error, 'prepareError')]
    };
  }
}

function invokePrepareUnchecked(type /*: Type*/, value /*: SelectedValue*/, viewOptions /*: ViewOptions*/) /*: PrepareInvocationResult*/ {
  return {
    selectedValue: value,
    returnValue: (type.preview.prepare || identity)(value, viewOptions),
    errors: EMPTY
  };
}

const invokePrepare = exports.invokePrepare = __DEV__ ? invokePrepareChecked : invokePrepareUnchecked;

function withErrors(result, type, selectedValue) {
  result.errors.forEach(error => errorCollector.add(type, selectedValue, error));
  reportErrors();

  return _constants.INVALID_PREVIEW_CONFIG;
}

function prepareForPreview(rawValue, type, viewOptions) /*: PreparedValue*/ {
  const selection = type.preview.select;
  const targetKeys = Object.keys(selection);

  const selectedValue = targetKeys.reduce((acc, key) => {
    acc[key] = (0, _get3.default)(rawValue, selection[key]);
    return acc;
  }, {});

  const prepareResult = invokePrepare(type, selectedValue, viewOptions);
  if (prepareResult.errors.length > 0) {
    return withErrors(prepareResult, type, selectedValue);
  }

  const returnValueResult = validateReturnedPreview(invokePrepare(type, selectedValue, viewOptions));
  return returnValueResult.errors.length > 0 ? withErrors(returnValueResult, type, selectedValue) : _extends({}, (0, _pick3.default)(rawValue, PRESERVE_KEYS), prepareResult.returnValue);
}