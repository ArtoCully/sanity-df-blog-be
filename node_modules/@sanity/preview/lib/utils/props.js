'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = props;

var _rxjs = require('rxjs');

var _isObservable = require('is-observable');

var _isObservable2 = _interopRequireDefault(_isObservable);

var _operators = require('rxjs/operators');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function setKey(source, key, value) {
  return _extends({}, source, {
    [key]: value
  });
}

function props(options = {}) {
  return source => {
    return new _rxjs.Observable(observer => source.subscribe(observer)).pipe((0, _operators.switchMap)(object => {
      const keyObservables = Object.keys(object).map(key => {
        const value = object[key];
        return (0, _isObservable2.default)(value) ? (0, _rxjs.from)(value).pipe((0, _operators.map)(val => [key, val])) : (0, _rxjs.of)([key, value]);
      });

      return options.wait ? (0, _rxjs.from)(keyObservables).pipe((0, _operators.combineAll)(), (0, _operators.map)(pairs => pairs.reduce((acc, [key, value]) => setKey(acc, key, value), {}))) : (0, _rxjs.from)(keyObservables).pipe((0, _operators.mergeAll)(), (0, _operators.scan)((acc, [key, value]) => setKey(acc, key, value), {}));
    }));
  };
}