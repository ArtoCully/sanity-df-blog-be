'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rxjs = require('rxjs');

var _operators = require('rxjs/operators');

var _observeForPreview = require('../observeForPreview');

var _observeForPreview2 = _interopRequireDefault(_observeForPreview);

var _shallowEquals = require('shallow-equals');

var _shallowEquals2 = _interopRequireDefault(_shallowEquals);

var _intersectionObservableFor = require('../streams/intersectionObservableFor');

var _intersectionObservableFor2 = _interopRequireDefault(_intersectionObservableFor);

var _visibilityChange = require('../streams/visibilityChange');

var _visibilityChange2 = _interopRequireDefault(_visibilityChange);

var _constants = require('../constants');

var _warningIcon = require('part:@sanity/base/warning-icon');

var _warningIcon2 = _interopRequireDefault(_warningIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

const INVALID_PREVIEW_FALLBACK = {
  title: _react2.default.createElement(
    'span',
    { style: { fontStyle: 'italic' } },
    'Invalid preview config'
  ),
  subtitle: _react2.default.createElement(
    'span',
    { style: { fontStyle: 'italic' } },
    'Check the error log in the console'
  ),
  media: _warningIcon2.default

  // How long to wait before signalling tear down of subscriptions
};const DELAY_MS = 20 * 1000;

const isVisible$ = _visibilityChange2.default.pipe((0, _operators.map)(event => !event.target.hidden));
const visibilityOn$ = isVisible$.pipe((0, _operators.filter)(Boolean));
const visibilityOff$ = isVisible$.pipe((0, _operators.filter)(isVisible => !isVisible));

// A stream of booleans to signal whether preview component should keep
// subscriptions active or not
const keepActive$ = new _rxjs.Observable(observer => {
  observer.next(!document.hidden);
  observer.complete();
}).pipe((0, _operators.concat)(visibilityOn$.pipe((0, _operators.switchMap)(on => (0, _rxjs.of)(on).pipe((0, _operators.concat)(visibilityOff$.pipe((0, _operators.debounceTime)(DELAY_MS), (0, _operators.mapTo)(false)))))).pipe((0, _operators.distinctUntilChanged)(), (0, _operators.publishReplay)(1), (0, _operators.refCount)())));

class PreviewSubscriber extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      error: null,
      result: { snapshot: null, type: null },
      isLive: false
    }, this.setElement = element => {
      this._element = element;
    }, _temp;
  }

  componentDidMount() {
    this.subscribe(this.props.value, this.props.type, this.props.fields);
  }

  componentWillUnmount() {
    this.unsubscribe();
  }

  unsubscribe() {
    if (this.subscription) {
      this.subscription.unsubscribe();
      this.subscription = null;
    }
  }

  componentWillUpdate(nextProps) {
    if (!(0, _shallowEquals2.default)(nextProps.value, this.props.value)) {
      this.subscribe(nextProps.value, nextProps.type);
    }
  }

  subscribe(value, type, fields) {
    this.unsubscribe();

    const viewOptions = this.props.ordering ? { ordering: this.props.ordering } : {};

    const inViewport$ = (0, _intersectionObservableFor2.default)(this._element).pipe((0, _operators.map)(event => event.isIntersecting));

    this.subscription = keepActive$.pipe((0, _operators.switchMap)(isVisible => isVisible ? inViewport$ : (0, _rxjs.of)(false)), (0, _operators.distinctUntilChanged)(), (0, _operators.switchMap)(isInViewport => {
      return isInViewport ? (0, _observeForPreview2.default)(value, type, fields, viewOptions) : (0, _rxjs.of)(null);
    })).subscribe(result => {
      if (result) {
        this.setState({ result, isLive: true });
      } else {
        this.setState({ isLive: false });
      }
    });
  }

  render() {
    var _state = this.state;
    const result = _state.result,
          isLive = _state.isLive,
          error = _state.error;
    var _props = this.props;

    const Child = _props.children,
          props = _objectWithoutProperties(_props, ['children']);

    const snapshot = result.snapshot === _constants.INVALID_PREVIEW_CONFIG ? INVALID_PREVIEW_FALLBACK : result.snapshot;

    return (
      // note: the root element here should be a span since this component may be used to display inline previews
      _react2.default.createElement(
        'span',
        { ref: this.setElement },
        _react2.default.createElement(Child, _extends({ snapshot: snapshot, type: result.type, isLive: isLive, error: error }, props))
      )
    );
  }
}
exports.default = PreviewSubscriber;
PreviewSubscriber.propTypes = {
  type: _propTypes2.default.object.isRequired,
  fields: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['title', 'description', 'imageUrl'])),
  value: _propTypes2.default.any.isRequired,
  ordering: _propTypes2.default.object,
  children: _propTypes2.default.func
};