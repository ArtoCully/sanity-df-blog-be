'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let promptForOrigin = (() => {
  var _ref2 = _asyncToGenerator(function* (specified, context) {
    const specifiedOrigin = specified && specified.toLowerCase();
    const prompt = context.prompt,
          apiClient = context.apiClient;

    const client = apiClient({ requireUser: true, requireProject: true });

    const origins = yield client.request({ url: '/cors' });
    if (specifiedOrigin) {
      const selected = origins.filter(function (origin) {
        return origin.origin.toLowerCase() === specifiedOrigin;
      })[0];
      if (!selected) {
        throw new Error(`Origin "${specified} not found"`);
      }

      return selected.id;
    }

    const choices = origins.map(function (origin) {
      return { value: origin.id, name: origin.origin };
    });
    return prompt.single({
      message: 'Select origin to delete',
      type: 'list',
      choices
    });
  });

  return function promptForOrigin(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const addCorsOrigin = require('../../actions/cors/addCorsOrigin');

const helpText = `
Examples
  sanity cors delete
  sanity cors delete http://localhost:3000
`;

exports.default = {
  name: 'delete',
  group: 'cors',
  signature: '[ORIGIN]',
  helpText,
  description: 'Delete an existing CORS-origin from your project',
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const output = context.output,
            apiClient = context.apiClient;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1);

      const origin = _args$argsWithoutOpti[0];

      const client = apiClient({ requireUser: true, requireProject: true });
      const originId = yield promptForOrigin(origin, context);
      try {
        yield client.request({ method: 'DELETE', uri: `/cors/${originId}` });
        output.print('Origin deleted');
      } catch (err) {
        throw new Error(`Origin deletion failed:\n${err.message}`);
      }
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()
};